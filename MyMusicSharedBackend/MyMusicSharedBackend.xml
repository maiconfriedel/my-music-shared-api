<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyMusicSharedBackend</name>
    </assembly>
    <members>
        <member name="T:MyMusicSharedBackend.Controllers.LoginController">
            <summary>
            Controller for login
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Controllers.LoginController.#ctor(MyMusicSharedBackend.Core.Interfaces.UseCases.ILoginUserUseCase)">
            <summary>
            Class constructor
            </summary>
            <param name="loginUserUseCase">Use Case to login</param>
        </member>
        <member name="M:MyMusicSharedBackend.Controllers.LoginController.Login(MyMusicSharedBackend.Models.Login)">
            <summary>
            Logins to the application
            </summary>
            <param name="login">Login Data</param>
            <returns>JWT Token</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Controllers.UsersController">
            <summary>
            Users Controller
            </summary>
        </member>
        <member name="F:MyMusicSharedBackend.Controllers.UsersController._registerUserUseCase">
            <summary>
            Register user use case
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Controllers.UsersController.#ctor(MyMusicSharedBackend.Core.Interfaces.UseCases.IRegisterUserUseCase)">
            <summary>
            Constructor
            </summary>
            <param name="registerUserUseCase">Register user use case</param>
        </member>
        <member name="M:MyMusicSharedBackend.Controllers.UsersController.PostUser(MyMusicSharedBackend.Models.User)">
            <summary>
            Create a user
            </summary>
            <param name="user">User data</param>
            <returns>The created user Id</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Models.Login">
            <summary>
            Class to login
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Login.Username">
            <summary>
            User name
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Login.Password">
            <summary>
            Password of the user
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Login.Scopes">
            <summary>
            Scopes to authenticate
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Login.RefreshToken">
            <summary>
            Refresh token to get new Token
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Models.Login.ToString">
            <summary>
            ToString of the class
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Models.Password.Hash">
            <summary>
            Hash the password
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Models.Password.Hash.Create(System.String,System.String)">
            <summary>
            Creates a Hash
            </summary>
            <param name="value">The Value to hash</param>
            <param name="salt">Salt to validade</param>
            <returns>Hashed Value</returns>
        </member>
        <member name="M:MyMusicSharedBackend.Models.Password.Hash.Validate(System.String,System.String,System.String)">
            <summary>
            Validats the hash to the value using the salt
            </summary>
            <param name="value">Value without hash</param>
            <param name="salt">Salt to validate</param>
            <param name="hash">Hashed value</param>
            <returns>True or false</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Models.RefreshToken">
            <summary>
            Refresh Token
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.Id">
            <summary>
            Identifier of the refresh token
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.RefreshTokenValue">
            <summary>
            Value of the refresh token
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.ValidUntil">
            <summary>
            Until when the token is valid
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.Username">
            <summary>
            Username of the token
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.Scopes">
            <summary>
            Scopes for the token
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.RefreshToken.IsValid">
            <summary>
            The refresh token stills valid
            </summary>
        </member>
        <member name="T:MyMusicSharedBackend.Models.Token">
            <summary>
            Token Data
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Models.Token.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor with values
            </summary>
            <param name="type"></param>
            <param name="accessToken"></param>
            <param name="refreshToken"></param>
        </member>
        <member name="M:MyMusicSharedBackend.Models.Token.#ctor">
            <summary>
            Empty constructor with default values
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Token.Type">
            <summary>
            Token Type
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Token.AccessToken">
            <summary>
            The token itself
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.Token.RefreshToken">
            <summary>
            Token to authenticate without passing user and password again
            </summary>
        </member>
        <member name="T:MyMusicSharedBackend.Models.User">
            <summary>
            User Data
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.Id">
            <summary>
            User Identifier
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.Email">
            <summary>
            Email of the user
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.Username">
            <summary>
            Username for login
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.Password">
            <summary>
            Password for login
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.FullName">
            <summary>
            Full Name
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Models.User.Bio">
            <summary>
            Bio of the user
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Models.User.ToString">
            <summary>
            ToString of the class
            </summary>
            <returns>String</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.DeletePresenter`1">
            <summary>
            Object responsible for formatting the presentation of the return of the use case in DELETE methods
            </summary>
            <typeparam name="TResult">Use case result type</typeparam>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.DeletePresenter`1.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.DeletePresenter`1.ContentResult">
            <summary>
            Presentation content
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.DeletePresenter`1.Handle(MyMusicSharedBackend.Core.Dto.UseCaseResponses.UseCaseResponse{`0})">
            <summary>
            Handles the result of the use case and prepares the presentation
            </summary>
            <param name="response">Result of the use case</param>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.GetPresenter`2">
            <summary>
            Object responsible for formatting the presentation of the return of the use case in GET methods
            </summary>
            <typeparam name="TResult">Use case result type</typeparam>
            <typeparam name="TModel">Presentation template type</typeparam>
        </member>
        <member name="F:MyMusicSharedBackend.Presenters.GetPresenter`2._mapper">
            <summary>
            AutoMapper instance
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.GetPresenter`2.#ctor(AutoMapper.IMapper)">
            <summary>
            Class constructor
            </summary>
            <param name="mapper">AutoMapper instance</param>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.GetPresenter`2.ContentResult">
            <summary>
            Presentation content
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.GetPresenter`2.Handle(MyMusicSharedBackend.Core.Dto.UseCaseResponses.UseCaseResponse{`0})">
            <summary>
            Handles the result of the use case and prepares the presentation
            </summary>
            <param name="response">Result of the use case</param>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.JsonContentResult">
            <summary>
            JSON Content Type
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.JsonContentResult.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.LoginUserPresenter">
            <summary>
            Presents the token for the API in JSON Format
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.LoginUserPresenter.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.LoginUserPresenter.ContentResult">
            <summary>
            Presentation content
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.LoginUserPresenter.Handle(MyMusicSharedBackend.Core.Dto.UseCaseResponses.UseCaseResponse{MyMusicSharedBackend.Core.Dto.TokenDto})">
            <summary>
            Handles the result of the use case and prepares the presentation
            </summary>
            <param name="response">Result of the use case</param>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.PostPresenter`1">
            <summary>
            Object responsible for formatting the presentation of the return of the use case in POST methods
            </summary>
            <typeparam name="TResult">Tipo do resultado do caso de uso</typeparam>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.PostPresenter`1.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PostPresenter`1.ContentResult">
            <summary>
            Presentation content
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.PostPresenter`1.Handle(MyMusicSharedBackend.Core.Dto.UseCaseResponses.UseCaseResponse{`0})">
            <summary>
            Handles the result of the use case and prepares the presentation
            </summary>
            <param name="response">Result of the use case</param>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.PostResponseModel`1">
            <summary>
            POST Method Response
            </summary>
            <typeparam name="TResult">Result Type</typeparam>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PostResponseModel`1.Errors">
            <summary>
            Error Messages
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PostResponseModel`1.Id">
            <summary>
            Identifier of the created entity
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PostResponseModel`1.Message">
            <summary>
            Friendly message to present to the user in case of error
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PostResponseModel`1.Success">
            <summary>
            Operation status
            </summary>
        </member>
        <member name="T:MyMusicSharedBackend.Presenters.PutPresenter`1">
            <summary>
            Object responsible for formatting the presentation of the return of the use case in POST methods
            </summary>
            <typeparam name="TResult">Tipo do resultado do caso de uso</typeparam>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.PutPresenter`1.#ctor">
            <summary>
            Class constructor
            </summary>
        </member>
        <member name="P:MyMusicSharedBackend.Presenters.PutPresenter`1.ContentResult">
            <summary>
            Presentation content
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Presenters.PutPresenter`1.Handle(MyMusicSharedBackend.Core.Dto.UseCaseResponses.UseCaseResponse{`0})">
            <summary>
            Handles the result of the use case and prepares the presentation
            </summary>
            <param name="response">Result of the use case</param>
        </member>
        <member name="T:MyMusicSharedBackend.Program">
            <summary>
            Class that contains the main method of the program
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Program.Main(System.String[])">
            <summary>
            Main method
            </summary>
            <param name="args">Arguments for the execution</param>
        </member>
        <member name="M:MyMusicSharedBackend.Program.CreateHostBuilder(System.String[])">
            <summary>
            Creates the host
            </summary>
            <param name="args">Arguments</param>
            <returns>Host Builder</returns>
        </member>
        <member name="T:MyMusicSharedBackend.Startup">
            <summary>
            Class for Startup of the application
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Startup.#ctor(Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Constructor of the class
            </summary>
            <param name="configuration">Configuration file Settings</param>
        </member>
        <member name="P:MyMusicSharedBackend.Startup.Configuration">
            <summary>
            Configuration file Settings
            </summary>
        </member>
        <member name="M:MyMusicSharedBackend.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            This method gets called by the runtime. Use this method to add services to the container.
            </summary>
            <param name="services">Services to add to the container</param>
        </member>
        <member name="M:MyMusicSharedBackend.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app">The App Builder</param>
            <param name="env">Environment details</param>
        </member>
    </members>
</doc>
